Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    alias(libs.plugins.android.application)\n    alias(libs.plugins.kotlin.android)\n    alias(libs.plugins.compose.compiler)\n}\n\nandroid {\n    namespace = \"com.verimsolution.tailwindplugin\"\n    compileSdk = 35\n\n    defaultConfig {\n        applicationId = \"com.verimsolution.tailwindplugin\"\n        minSdk = 24\n        targetSdk = 35\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_17\n        targetCompatibility = JavaVersion.VERSION_17\n    }\n    kotlinOptions {\n        jvmTarget = \"17\"\n    }\n}\n\ndependencies {\n\n\n    implementation(libs.androidx.core.ktx)\n    implementation(libs.androidx.appcompat)\n    implementation(libs.androidx.activity.compose)\n    implementation(libs.androidx.constraintlayout)\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.androidx.junit)\n    androidTestImplementation(libs.androidx.espresso.core)\n\n    implementation(platform(libs.androidx.compose.bom))\n    implementation(libs.androidx.ui)\n    implementation(libs.androidx.ui.tooling)\n    implementation(libs.androidx.ui.graphics)\n    implementation(libs.androidx.ui.test.junit4)\n    implementation(libs.androidx.ui.test.manifest)\n    implementation(libs.androidx.ui.tooling.preview)\n    implementation(project(\":tailwind\"))\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/app/build.gradle.kts	(date 1742244629818)
@@ -41,18 +41,17 @@
 
     implementation(libs.androidx.core.ktx)
     implementation(libs.androidx.appcompat)
+//    implementation(libs.material)
     implementation(libs.androidx.activity.compose)
     implementation(libs.androidx.constraintlayout)
     testImplementation(libs.junit)
     androidTestImplementation(libs.androidx.junit)
-    androidTestImplementation(libs.androidx.espresso.core)
-
-    implementation(platform(libs.androidx.compose.bom))
     implementation(libs.androidx.ui)
     implementation(libs.androidx.ui.tooling)
     implementation(libs.androidx.ui.graphics)
     implementation(libs.androidx.ui.test.junit4)
     implementation(libs.androidx.ui.test.manifest)
     implementation(libs.androidx.ui.tooling.preview)
+    androidTestImplementation(libs.androidx.espresso.core)
     implementation(project(":tailwind"))
 }
\ No newline at end of file
Index: app/src/main/java/com/verimsolution/tailwindplugin/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.verimsolution.tailwindplugin\n\nimport android.os.Bundle\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.verimsolution.tailwind.Surface\nimport com.verimsolution.tailwind.TailwindAccordion\nimport com.verimsolution.tailwind.TailwindAccordionItem\nimport com.verimsolution.tailwind.TailwindText\nimport com.verimsolution.tailwind.TailwindTheme\nimport com.verimsolution.tailwindplugin.ui.themes.TailwindPluginTheme\n\nclass MainActivity : AppCompatActivity() {\n//    val accordionItems = listOf(\n//        TailwindAccordionItem(\n//            title = \"What is Flowbite?\",\n//            initiallyExpanded = true,\n//            content = {\n//                TailwindText(\"Flowbite is an open-source library of interactive components built on top of Tailwind CSS.\")\n//                TailwindText(\"It includes buttons, dropdowns, modals, and more.\")\n//            }\n//        ),\n//        TailwindAccordionItem(\n//            title = \"What is Flowbite?\",\n//            content = {\n//                TailwindText(\"Flowbite is an open-source library of interactive components built on top of Tailwind CSS.\")\n//                TailwindText(\"It includes buttons, dropdowns, modals, and more.\")\n//            }\n//        ),\n//        TailwindAccordionItem(\n//            title = \"Is there a Figma file available?\",\n//            content = {\n//                TailwindText(\"Flowbite is conceptualized and designed using Figma.\")\n//                TailwindText(\"Check out the Figma design system for more details.\")\n//            }\n//        ),\n////        AccordionItem(\n////            title = \"Differences between Flowbite and Tailwind UI?\",\n////            content = {\n////                TailwindText(\"Flowbite is open source under MIT, while Tailwind UI is a paid product.\")\n////                TailwindText(\"Both can be used together for the best of both worlds.\")\n////            }\n////        )\n//    )\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n\n        setContent {\n            TailwindPluginTheme {\n\n//                Surface {\n                    TailwindText(\"Accordion\")\n//                }\n            }\n        }\n    }\n}\n\n\n@Preview(showBackground = true, showSystemUi = true)\n@Composable\nprivate fun Prev() {\n\n//    val accordionItems = listOf(\n//        TailwindAccordionItem(\n//            title = \"What is Flowbite?\",\n//            initiallyExpanded = true,\n//            content = {\n//                TailwindText(\"Flowbite is an open-source library of interactive components built on top of Tailwind CSS.\")\n//                TailwindText(\"It includes buttons, dropdowns, modals, and more.\")\n//            }\n//        ),\n//        TailwindAccordionItem(\n//            title = \"Is there a Figma file available?\",\n//            initiallyExpanded = false,\n//            content = {\n//                TailwindText(\"Flowbite is conceptualized and designed using Figma.\")\n//                TailwindText(\"Check out the Figma design system for more details.\")\n//            }\n//        ),\n//        TailwindAccordionItem(\n//            title = \"Differences between Flowbite and Tailwind UI?\",\n//            content = {\n//                TailwindText(\"Flowbite is open source under MIT, while Tailwind UI is a paid product.\")\n//                TailwindText(\"Both can be used together for the best of both worlds.\")\n//            }\n//        )\n//    )\n\n    TailwindPluginTheme {\n\n//        TailwindAccordion(\n//            items = accordionItems,\n//            allowMultiple = true,\n//            headerContentColor = TailwindTheme.colorScheme.onBackground,\n//            headerBackgroundColor = TailwindTheme.colorScheme.background,\n//            contentContentColor = TailwindTheme.colorScheme.onBackground,\n//            contentBackgroundColor = TailwindTheme.colorScheme.background\n//        )\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/verimsolution/tailwindplugin/MainActivity.kt b/app/src/main/java/com/verimsolution/tailwindplugin/MainActivity.kt
--- a/app/src/main/java/com/verimsolution/tailwindplugin/MainActivity.kt	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/app/src/main/java/com/verimsolution/tailwindplugin/MainActivity.kt	(date 1742244691062)
@@ -5,45 +5,37 @@
 import androidx.activity.enableEdgeToEdge
 import androidx.appcompat.app.AppCompatActivity
 import androidx.compose.runtime.Composable
+import androidx.compose.ui.Modifier
 import androidx.compose.ui.tooling.preview.Preview
-import com.verimsolution.tailwind.Surface
-import com.verimsolution.tailwind.TailwindAccordion
-import com.verimsolution.tailwind.TailwindAccordionItem
+import com.verimsolution.tailwind.Accordion
+import com.verimsolution.tailwind.AccordionItem
 import com.verimsolution.tailwind.TailwindText
-import com.verimsolution.tailwind.TailwindTheme
 import com.verimsolution.tailwindplugin.ui.themes.TailwindPluginTheme
 
 class MainActivity : AppCompatActivity() {
 //    val accordionItems = listOf(
-//        TailwindAccordionItem(
+//        AccordionItem(
 //            title = "What is Flowbite?",
 //            initiallyExpanded = true,
 //            content = {
-//                TailwindText("Flowbite is an open-source library of interactive components built on top of Tailwind CSS.")
-//                TailwindText("It includes buttons, dropdowns, modals, and more.")
-//            }
-//        ),
-//        TailwindAccordionItem(
-//            title = "What is Flowbite?",
-//            content = {
-//                TailwindText("Flowbite is an open-source library of interactive components built on top of Tailwind CSS.")
-//                TailwindText("It includes buttons, dropdowns, modals, and more.")
+//
 //            }
 //        ),
-//        TailwindAccordionItem(
+//        AccordionItem(
 //            title = "Is there a Figma file available?",
+//            initiallyExpanded = true,
 //            content = {
 //                TailwindText("Flowbite is conceptualized and designed using Figma.")
 //                TailwindText("Check out the Figma design system for more details.")
 //            }
 //        ),
-////        AccordionItem(
-////            title = "Differences between Flowbite and Tailwind UI?",
-////            content = {
-////                TailwindText("Flowbite is open source under MIT, while Tailwind UI is a paid product.")
-////                TailwindText("Both can be used together for the best of both worlds.")
-////            }
-////        )
+//        AccordionItem(
+//            title = "Differences between Flowbite and Tailwind UI?",
+//            content = {
+//                TailwindText("Flowbite is open source under MIT, while Tailwind UI is a paid product.")
+//                TailwindText("Both can be used together for the best of both worlds.")
+//            }
+//        )
 //    )
 
     override fun onCreate(savedInstanceState: Bundle?) {
@@ -52,10 +44,8 @@
 
         setContent {
             TailwindPluginTheme {
-
-//                Surface {
-                    TailwindText("Accordion")
-//                }
+                TailwindText("Hello, world!")
+//                Accordion(items = accordionItems, allowMultiple = false, modifier = Modifier)
             }
         }
     }
@@ -66,41 +56,10 @@
 @Composable
 private fun Prev() {
 
-//    val accordionItems = listOf(
-//        TailwindAccordionItem(
-//            title = "What is Flowbite?",
-//            initiallyExpanded = true,
-//            content = {
-//                TailwindText("Flowbite is an open-source library of interactive components built on top of Tailwind CSS.")
-//                TailwindText("It includes buttons, dropdowns, modals, and more.")
-//            }
-//        ),
-//        TailwindAccordionItem(
-//            title = "Is there a Figma file available?",
-//            initiallyExpanded = false,
-//            content = {
-//                TailwindText("Flowbite is conceptualized and designed using Figma.")
-//                TailwindText("Check out the Figma design system for more details.")
-//            }
-//        ),
-//        TailwindAccordionItem(
-//            title = "Differences between Flowbite and Tailwind UI?",
-//            content = {
-//                TailwindText("Flowbite is open source under MIT, while Tailwind UI is a paid product.")
-//                TailwindText("Both can be used together for the best of both worlds.")
-//            }
-//        )
-//    )
 
     TailwindPluginTheme {
-
-//        TailwindAccordion(
-//            items = accordionItems,
-//            allowMultiple = true,
-//            headerContentColor = TailwindTheme.colorScheme.onBackground,
-//            headerBackgroundColor = TailwindTheme.colorScheme.background,
-//            contentContentColor = TailwindTheme.colorScheme.onBackground,
-//            contentBackgroundColor = TailwindTheme.colorScheme.background
+//        TailwindText(
+//            text = "Hello, world!",
 //        )
 
     }
Index: tailwind/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    alias(libs.plugins.android.library)\n    alias(libs.plugins.kotlin.android)\n    alias(libs.plugins.compose.compiler)\n    `maven-publish`\n}\n\nandroid {\n    namespace = \"com.verimsolution.tailwind\"\n    compileSdk = 35\n\n    defaultConfig {\n        minSdk = 24\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n        consumerProguardFiles(\"consumer-rules.pro\")\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n    kotlinOptions {\n        jvmTarget = \"11\"\n    }\n}\n\ndependencies {\n\n    implementation(libs.androidx.core.ktx)\n    implementation(libs.androidx.appcompat)\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.androidx.junit)\n    androidTestImplementation(libs.androidx.espresso.core)\n\n    implementation(platform(libs.androidx.compose.bom))\n    implementation(libs.androidx.ui)\n    implementation(libs.androidx.ui.tooling)\n    implementation(libs.androidx.ui.graphics)\n    implementation(libs.androidx.ui.test.junit4)\n    implementation(libs.androidx.ui.test.manifest)\n    implementation(libs.androidx.ui.tooling.preview)\n    implementation(libs.androidx.compose.foundation)\n    implementation(libs.androidx.material.ripple)\n}\n\ngroup = \"com.verimsolution.tailwind\"\nversion = \"0.0.1\"\n\nafterEvaluate {\n    publishing {\n        publications {\n            create<MavenPublication>(\"release\") {\n                from(components[\"release\"])\n                groupId = \"com.verimsolution\"\n                artifactId = \"tailwind\"\n                version = \"0.0.1\"\n\n                versionMapping {\n                    usage(\"java-api\") {\n                        fromResolutionOf(\"runtimeClasspath\")\n                    }\n                    usage(\"java-runtime\") {\n                        fromResolutionResult()\n                    }\n                }\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tailwind/build.gradle.kts b/tailwind/build.gradle.kts
--- a/tailwind/build.gradle.kts	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/tailwind/build.gradle.kts	(date 1742244629695)
@@ -3,6 +3,7 @@
     alias(libs.plugins.kotlin.android)
     alias(libs.plugins.compose.compiler)
     `maven-publish`
+    signing
 }
 
 android {
Index: settings.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>pluginManagement {\n    repositories {\n        google {\n            content {\n                includeGroupByRegex(\"com\\\\.android.*\")\n                includeGroupByRegex(\"com\\\\.google.*\")\n                includeGroupByRegex(\"androidx.*\")\n            }\n        }\n        mavenCentral()\n        gradlePluginPortal()\n    }\n}\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n        maven(\"https://jitpack.io\")\n    }\n}\n\nrootProject.name = \"Tailwind Plugin\"\ninclude(\":app\")\ninclude(\":tailwind\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle.kts b/settings.gradle.kts
--- a/settings.gradle.kts	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/settings.gradle.kts	(date 1742244629683)
@@ -16,7 +16,6 @@
     repositories {
         google()
         mavenCentral()
-        maven("https://jitpack.io")
     }
 }
 
Index: .idea/androidTestResultsUserPreferences.xml
===================================================================
diff --git a/.idea/androidTestResultsUserPreferences.xml b/.idea/androidTestResultsUserPreferences.xml
deleted file mode 100644
--- a/.idea/androidTestResultsUserPreferences.xml	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ /dev/null	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="AndroidTestResultsUserPreferences">
-    <option name="androidTestResultsTableState">
-      <map>
-        <entry key="-801932903">
-          <value>
-            <AndroidTestResultsTableState>
-              <option name="preferredColumnWidths">
-                <map>
-                  <entry key="Duration" value="90" />
-                  <entry key="Tests" value="360" />
-                  <entry key="samsung SM-G960U" value="120" />
-                </map>
-              </option>
-            </AndroidTestResultsTableState>
-          </value>
-        </entry>
-      </map>
-    </option>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/deploymentTargetSelector.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"deploymentTargetSelector\">\n    <selectionStates>\n      <SelectionState runConfigName=\"Tailwind_Plugin.app\">\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\n      </SelectionState>\n      <SelectionState runConfigName=\"accordionItem_togglesContentVisibility()\">\n        <option name=\"selectionMode\" value=\"DROPDOWN\" />\n      </SelectionState>\n    </selectionStates>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
--- a/.idea/deploymentTargetSelector.xml	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/.idea/deploymentTargetSelector.xml	(date 1742286571425)
@@ -5,9 +5,6 @@
       <SelectionState runConfigName="Tailwind_Plugin.app">
         <option name="selectionMode" value="DROPDOWN" />
       </SelectionState>
-      <SelectionState runConfigName="accordionItem_togglesContentVisibility()">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
     </selectionStates>
   </component>
 </project>
\ No newline at end of file
Index: tailwind/src/main/java/com/verimsolution/tailwind/Accordion.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.verimsolution.tailwind\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.animateContentSize\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.expandVertically\nimport androidx.compose.animation.shrinkVertically\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.ColumnScope\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateListOf\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.rotate\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Shape\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\n\n/**\n * Objet contenant des valeurs par défaut pour les couleurs si l'utilisateur ne les personnalise pas.\n */\nobject TailwindDefaults {\n    val headerBackground: Color = Color(0xFFF3F4F6) // Une nuance claire, par exemple\n    val headerContent: Color = Color(0xFF1F2937)    // Une nuance foncée\n    val contentBackground: Color = Color.White\n    val contentContent: Color = Color(0xFF1F2937)    // Pareil que headerContent\n}\n\n/**\n * Modèle de données pour un item d'accordéon.\n */\ndata class TailwindAccordionItem(\n    val title: String,\n    val initiallyExpanded: Boolean = false,\n    val content: @Composable ColumnScope.() -> Unit\n)\n\n/**\n * Composable Accordion qui affiche une liste d'items.\n *\n * @param items Liste des items d'accordéon.\n * @param allowMultiple Si true, plusieurs items peuvent être ouverts simultanément.\n *                    Sinon, un seul item est ouvert à la fois.\n * @param headerBackgroundColor Couleur de fond de l'en-tête (par défaut TailwindDefaults.headerBackground).\n * @param headerContentColor Couleur du contenu de l'en-tête (par défaut TailwindDefaults.headerContent).\n * @param contentBackgroundColor Couleur de fond du contenu (par défaut TailwindDefaults.contentBackground).\n * @param contentContentColor Couleur du contenu affiché (par défaut TailwindDefaults.contentContent).\n */\n@Composable\nfun TailwindAccordion(\n    items: List<TailwindAccordionItem>,\n    allowMultiple: Boolean = false,\n    modifier: Modifier = Modifier,\n    headerShape: Shape = TailwindTheme.shapes.medium,\n    headerBackgroundColor: Color = TailwindDefaults.headerBackground,\n    headerContentColor: Color = TailwindDefaults.headerContent,\n    headerPadding: Dp = 20.dp,\n    contentBackgroundColor: Color = TailwindDefaults.contentBackground,\n    contentContentColor: Color = TailwindDefaults.contentContent,\n    contentPadding: Dp = 20.dp,\n) {\n    if (allowMultiple) {\n        // Plusieurs items ouverts simultanément.\n        val expandedStates =\n            remember { mutableStateListOf<Boolean>().apply { addAll(items.map { it.initiallyExpanded }) } }\n        Column(modifier = modifier.fillMaxWidth()) {\n            items.forEachIndexed { index, item ->\n                TailwindAccordionItemView(\n                    title = item.title,\n                    expanded = expandedStates[index],\n                    onToggle = { expandedStates[index] = !expandedStates[index] },\n                    headerShape = headerShape,\n                    headerBackgroundColor = headerBackgroundColor,\n                    headerContentColor = headerContentColor,\n                    headerPadding = headerPadding,\n                    contentBackgroundColor = contentBackgroundColor,\n                    contentContentColor = contentContentColor,\n                    contentPadding = contentPadding,\n                    content = item.content\n                )\n            }\n        }\n    } else {\n        // Un seul item ouvert à la fois.\n        var expandedIndex by remember {\n            mutableStateOf(items.indexOfFirst { it.initiallyExpanded }.takeIf { it >= 0 })\n        }\n        Column(modifier = modifier.fillMaxWidth()) {\n            items.forEachIndexed { index, item ->\n                TailwindAccordionItemView(\n                    title = item.title,\n                    expanded = expandedIndex == index,\n                    onToggle = {\n                        expandedIndex = if (expandedIndex == index) null else index\n                    },\n                    headerShape = headerShape,\n                    headerBackgroundColor = headerBackgroundColor,\n                    headerContentColor = headerContentColor,\n                    headerPadding = headerPadding,\n                    contentBackgroundColor = contentBackgroundColor,\n                    contentContentColor = contentContentColor,\n                    contentPadding = contentPadding,\n                    content = item.content\n                )\n            }\n        }\n    }\n}\n\n/**\n * Composable représentant un item individuel d'accordéon.\n *\n * L'en-tête comporte un titre et une icône animée qui pivote pour indiquer l'état (déployé/replié).\n * Le contenu est animé lors de son apparition/disparition.\n */\n@Composable\nfun TailwindAccordionItemView(\n    title: String,\n    expanded: Boolean,\n    onToggle: () -> Unit,\n    headerShape: Shape,\n    headerBackgroundColor: Color,\n    headerContentColor: Color,\n    headerPadding: Dp,\n    contentBackgroundColor: Color,\n    contentContentColor: Color,\n    contentPadding: Dp,\n    content: @Composable ColumnScope.() -> Unit,\n    modifier: Modifier = Modifier\n) {\n    // Animation de la rotation de l'icône\n    val rotation by animateFloatAsState(targetValue = if (expanded) 0f else 180f)\n\n    Column(\n        modifier = modifier\n            .fillMaxWidth()\n            .animateContentSize() // Anime les changements de taille\n    ) {\n        // En-tête cliquable\n        Surface(\n            modifier = Modifier\n                .fillMaxWidth()\n                .clickable { onToggle() },\n            shape = headerShape,\n            color = headerBackgroundColor,\n            contentColor = headerContentColor,\n            tonalElevation = 0.dp\n        ) {\n            Row(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(headerPadding),\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                TailwindText(\n                    text = title,\n                    style = TailwindTheme.typography.headlineSmall,\n                    color = headerContentColor,\n                    modifier = Modifier.weight(1f)\n                )\n                TailwindIcon(\n                    painter = painterResource(\n                        id = if (expanded) R.drawable.ic_chevron_up else R.drawable.ic_chevron_down\n                    ),\n                    contentDescription = if (expanded) \"Collapse\" else \"Expand\",\n                    tint = headerContentColor,\n                    modifier = Modifier\n                        .size(20.dp)\n                        .rotate(rotation)\n                )\n            }\n        }\n        // Contenu animé lors de l'apparition/disparition\n        AnimatedVisibility(\n            visible = expanded,\n            enter = expandVertically(),\n            exit = shrinkVertically()\n        ) {\n            Surface(\n                modifier = Modifier.fillMaxWidth(),\n                shape = headerShape, // Vous pouvez utiliser un autre shape pour le contenu\n                color = contentBackgroundColor,\n                contentColor = contentContentColor,\n                tonalElevation = 0.dp\n            ) {\n                // Fournir le contexte ColumnScope pour le contenu\n                Column(modifier = Modifier.padding(contentPadding), content = content)\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tailwind/src/main/java/com/verimsolution/tailwind/Accordion.kt b/tailwind/src/main/java/com/verimsolution/tailwind/Accordion.kt
--- a/tailwind/src/main/java/com/verimsolution/tailwind/Accordion.kt	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/tailwind/src/main/java/com/verimsolution/tailwind/Accordion.kt	(date 1742244629780)
@@ -5,7 +5,9 @@
 import androidx.compose.animation.core.animateFloatAsState
 import androidx.compose.animation.expandVertically
 import androidx.compose.animation.shrinkVertically
+import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Box
 import androidx.compose.foundation.layout.Column
 import androidx.compose.foundation.layout.ColumnScope
 import androidx.compose.foundation.layout.Row
@@ -21,54 +23,29 @@
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.draw.rotate
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.Shape
 import androidx.compose.ui.res.painterResource
-import androidx.compose.ui.unit.Dp
 import androidx.compose.ui.unit.dp
 
-/**
- * Objet contenant des valeurs par défaut pour les couleurs si l'utilisateur ne les personnalise pas.
- */
-object TailwindDefaults {
-    val headerBackground: Color = Color(0xFFF3F4F6) // Une nuance claire, par exemple
-    val headerContent: Color = Color(0xFF1F2937)    // Une nuance foncée
-    val contentBackground: Color = Color.White
-    val contentContent: Color = Color(0xFF1F2937)    // Pareil que headerContent
-}
-
 /**
  * Modèle de données pour un item d'accordéon.
  */
-data class TailwindAccordionItem(
+data class AccordionItem(
     val title: String,
     val initiallyExpanded: Boolean = false,
     val content: @Composable ColumnScope.() -> Unit
 )
 
 /**
- * Composable Accordion qui affiche une liste d'items.
+ * Composable Accordion.
  *
- * @param items Liste des items d'accordéon.
+ * @param items Liste des items de l'accordéon.
  * @param allowMultiple Si true, plusieurs items peuvent être ouverts simultanément.
- *                    Sinon, un seul item est ouvert à la fois.
- * @param headerBackgroundColor Couleur de fond de l'en-tête (par défaut TailwindDefaults.headerBackground).
- * @param headerContentColor Couleur du contenu de l'en-tête (par défaut TailwindDefaults.headerContent).
- * @param contentBackgroundColor Couleur de fond du contenu (par défaut TailwindDefaults.contentBackground).
- * @param contentContentColor Couleur du contenu affiché (par défaut TailwindDefaults.contentContent).
  */
 @Composable
-fun TailwindAccordion(
-    items: List<TailwindAccordionItem>,
-    allowMultiple: Boolean = false,
+fun Accordion(
     modifier: Modifier = Modifier,
-    headerShape: Shape = TailwindTheme.shapes.medium,
-    headerBackgroundColor: Color = TailwindDefaults.headerBackground,
-    headerContentColor: Color = TailwindDefaults.headerContent,
-    headerPadding: Dp = 20.dp,
-    contentBackgroundColor: Color = TailwindDefaults.contentBackground,
-    contentContentColor: Color = TailwindDefaults.contentContent,
-    contentPadding: Dp = 20.dp,
+    items: List<AccordionItem>,
+    allowMultiple: Boolean = false
 ) {
     if (allowMultiple) {
         // Plusieurs items ouverts simultanément.
@@ -76,17 +53,10 @@
             remember { mutableStateListOf<Boolean>().apply { addAll(items.map { it.initiallyExpanded }) } }
         Column(modifier = modifier.fillMaxWidth()) {
             items.forEachIndexed { index, item ->
-                TailwindAccordionItemView(
+                AccordionItemView(
                     title = item.title,
                     expanded = expandedStates[index],
                     onToggle = { expandedStates[index] = !expandedStates[index] },
-                    headerShape = headerShape,
-                    headerBackgroundColor = headerBackgroundColor,
-                    headerContentColor = headerContentColor,
-                    headerPadding = headerPadding,
-                    contentBackgroundColor = contentBackgroundColor,
-                    contentContentColor = contentContentColor,
-                    contentPadding = contentPadding,
                     content = item.content
                 )
             }
@@ -98,19 +68,12 @@
         }
         Column(modifier = modifier.fillMaxWidth()) {
             items.forEachIndexed { index, item ->
-                TailwindAccordionItemView(
+                AccordionItemView(
                     title = item.title,
                     expanded = expandedIndex == index,
                     onToggle = {
                         expandedIndex = if (expandedIndex == index) null else index
                     },
-                    headerShape = headerShape,
-                    headerBackgroundColor = headerBackgroundColor,
-                    headerContentColor = headerContentColor,
-                    headerPadding = headerPadding,
-                    contentBackgroundColor = contentBackgroundColor,
-                    contentContentColor = contentContentColor,
-                    contentPadding = contentPadding,
                     content = item.content
                 )
             }
@@ -125,18 +88,11 @@
  * Le contenu est animé lors de son apparition/disparition.
  */
 @Composable
-fun TailwindAccordionItemView(
+fun AccordionItemView(
     title: String,
     expanded: Boolean,
     onToggle: () -> Unit,
-    headerShape: Shape,
-    headerBackgroundColor: Color,
-    headerContentColor: Color,
-    headerPadding: Dp,
-    contentBackgroundColor: Color,
-    contentContentColor: Color,
-    contentPadding: Dp,
-    content: @Composable ColumnScope.() -> Unit,
+    content: @Composable (ColumnScope.() -> Unit),
     modifier: Modifier = Modifier
 ) {
     // Animation de la rotation de l'icône
@@ -145,28 +101,24 @@
     Column(
         modifier = modifier
             .fillMaxWidth()
-            .animateContentSize() // Anime les changements de taille
+            .animateContentSize() // Anime le changement de taille de l'accordion
     ) {
-        // En-tête cliquable
-        Surface(
+        // En-tête de l'item
+        Box(
             modifier = Modifier
                 .fillMaxWidth()
-                .clickable { onToggle() },
-            shape = headerShape,
-            color = headerBackgroundColor,
-            contentColor = headerContentColor,
-            tonalElevation = 0.dp
+                .clickable { onToggle() }
+                .background(color = TailwindTheme.colorScheme.surfaceVariant)
+                .padding(20.dp)
         ) {
             Row(
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(headerPadding),
+                modifier = Modifier.fillMaxWidth(),
                 verticalAlignment = Alignment.CenterVertically
             ) {
                 TailwindText(
                     text = title,
                     style = TailwindTheme.typography.headlineSmall,
-                    color = headerContentColor,
+                    color = TailwindTheme.colorScheme.onSurface,
                     modifier = Modifier.weight(1f)
                 )
                 TailwindIcon(
@@ -174,7 +126,7 @@
                         id = if (expanded) R.drawable.ic_chevron_up else R.drawable.ic_chevron_down
                     ),
                     contentDescription = if (expanded) "Collapse" else "Expand",
-                    tint = headerContentColor,
+                    tint = TailwindTheme.colorScheme.onSurface,
                     modifier = Modifier
                         .size(20.dp)
                         .rotate(rotation)
@@ -187,16 +139,16 @@
             enter = expandVertically(),
             exit = shrinkVertically()
         ) {
-            Surface(
-                modifier = Modifier.fillMaxWidth(),
-                shape = headerShape, // Vous pouvez utiliser un autre shape pour le contenu
-                color = contentBackgroundColor,
-                contentColor = contentContentColor,
-                tonalElevation = 0.dp
+            Box(
+                modifier = Modifier
+                    .fillMaxWidth()
+                    .background(color = TailwindTheme.colorScheme.surface)
+                    .padding(20.dp)
             ) {
-                // Fournir le contexte ColumnScope pour le contenu
-                Column(modifier = Modifier.padding(contentPadding), content = content)
-            }
-        }
-    }
-}
+                Column {
+                    content()
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"CHOOSE_PER_TEST\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"gradleJvm\" value=\"#GRADLE_LOCAL_JAVA_HOME\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n            <option value=\"$PROJECT_DIR$/tailwind\" />\n          </set>\n        </option>\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/.idea/gradle.xml	(date 1742287617294)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <bytecodeTargetLevel>\n      <module name=\"Tailwind_Plugin.Tailwind\" target=\"11\" />\n      <module name=\"Tailwind_Plugin.Tailwind.main\" target=\"11\" />\n      <module name=\"Tailwind_Plugin.Tailwind.test\" target=\"11\" />\n    </bytecodeTargetLevel>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/.idea/compiler.xml	(date 1742287617291)
@@ -2,6 +2,7 @@
 <project version="4">
   <component name="CompilerConfiguration">
     <bytecodeTargetLevel>
+      <module name="Tailwind_Plugin.tailwind" target="21" />
       <module name="Tailwind_Plugin.Tailwind" target="11" />
       <module name="Tailwind_Plugin.Tailwind.main" target="11" />
       <module name="Tailwind_Plugin.Tailwind.test" target="11" />
Index: tailwind/src/androidTest/java/com/verimsolution/tailwind/ExampleInstrumentedTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.verimsolution.tailwind\n\nimport androidx.compose.ui.test.assertIsDisplayed\nimport androidx.compose.ui.test.junit4.createComposeRule\nimport androidx.compose.ui.test.onNodeWithText\nimport androidx.compose.ui.test.performClick\nimport androidx.test.platform.app.InstrumentationRegistry\nimport androidx.test.ext.junit.runners.AndroidJUnit4\n\nimport org.junit.Test\nimport org.junit.runner.RunWith\n\nimport org.junit.Assert.*\nimport org.junit.Rule\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * See [testing documentation](http://d.android.com/tools/testing).\n */\n@RunWith(AndroidJUnit4::class)\nclass ExampleInstrumentedTest {\n    @Test\n    fun useAppContext() {\n        // Context of the app under test.\n        val appContext = InstrumentationRegistry.getInstrumentation().targetContext\n        assertEquals(\"com.verimsolution.tailwind.test\", appContext.packageName)\n    }\n\n    @get:Rule\n    val composeTestRule = createComposeRule()\n\n    @Test\n    fun accordionItem_togglesContentVisibility() {\n        val itemTitle = \"Test Accordion Item\"\n        val itemContent = \"This is the content\"\n\n        // Configurer le contenu Compose pour le test\n        composeTestRule.setContent {\n            TailwindAccordion(\n                items = listOf(\n                    TailwindAccordionItem(\n                        title = itemTitle,\n                        initiallyExpanded = true,\n                        content = {\n                            TailwindText(itemContent)\n                        }\n                    )\n                )\n            )\n        }\n\n        // Vérifier que le titre est affiché\n        composeTestRule.onNodeWithText(itemTitle).assertIsDisplayed()\n        // Vérifier que le contenu est affiché (initialement l'item est déployé)\n        composeTestRule.onNodeWithText(itemContent).assertIsDisplayed()\n\n        // Simuler un clic sur le titre pour replier l'item\n        composeTestRule.onNodeWithText(itemTitle).performClick()\n        // Attendre la fin des animations (si nécessaire)\n        composeTestRule.waitForIdle()\n\n        // Vérifier que le contenu n'est plus visible\n        composeTestRule.onNodeWithText(itemContent).assertDoesNotExist()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tailwind/src/androidTest/java/com/verimsolution/tailwind/ExampleInstrumentedTest.kt b/tailwind/src/androidTest/java/com/verimsolution/tailwind/ExampleInstrumentedTest.kt
--- a/tailwind/src/androidTest/java/com/verimsolution/tailwind/ExampleInstrumentedTest.kt	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/tailwind/src/androidTest/java/com/verimsolution/tailwind/ExampleInstrumentedTest.kt	(date 1742244629768)
@@ -1,9 +1,5 @@
 package com.verimsolution.tailwind
 
-import androidx.compose.ui.test.assertIsDisplayed
-import androidx.compose.ui.test.junit4.createComposeRule
-import androidx.compose.ui.test.onNodeWithText
-import androidx.compose.ui.test.performClick
 import androidx.test.platform.app.InstrumentationRegistry
 import androidx.test.ext.junit.runners.AndroidJUnit4
 
@@ -11,7 +7,6 @@
 import org.junit.runner.RunWith
 
 import org.junit.Assert.*
-import org.junit.Rule
 
 /**
  * Instrumented test, which will execute on an Android device.
@@ -26,41 +21,4 @@
         val appContext = InstrumentationRegistry.getInstrumentation().targetContext
         assertEquals("com.verimsolution.tailwind.test", appContext.packageName)
     }
-
-    @get:Rule
-    val composeTestRule = createComposeRule()
-
-    @Test
-    fun accordionItem_togglesContentVisibility() {
-        val itemTitle = "Test Accordion Item"
-        val itemContent = "This is the content"
-
-        // Configurer le contenu Compose pour le test
-        composeTestRule.setContent {
-            TailwindAccordion(
-                items = listOf(
-                    TailwindAccordionItem(
-                        title = itemTitle,
-                        initiallyExpanded = true,
-                        content = {
-                            TailwindText(itemContent)
-                        }
-                    )
-                )
-            )
-        }
-
-        // Vérifier que le titre est affiché
-        composeTestRule.onNodeWithText(itemTitle).assertIsDisplayed()
-        // Vérifier que le contenu est affiché (initialement l'item est déployé)
-        composeTestRule.onNodeWithText(itemContent).assertIsDisplayed()
-
-        // Simuler un clic sur le titre pour replier l'item
-        composeTestRule.onNodeWithText(itemTitle).performClick()
-        // Attendre la fin des animations (si nécessaire)
-        composeTestRule.waitForIdle()
-
-        // Vérifier que le contenu n'est plus visible
-        composeTestRule.onNodeWithText(itemContent).assertDoesNotExist()
-    }
 }
\ No newline at end of file
Index: .idea/material_theme_project_new.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"MaterialThemeProjectNewConfig\">\n    <option name=\"metadata\">\n      <MTProjectMetadataState>\n        <option name=\"userId\" value=\"38e0ec12:195a3510ae8:-7ff1\" />\n      </MTProjectMetadataState>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/material_theme_project_new.xml b/.idea/material_theme_project_new.xml
--- a/.idea/material_theme_project_new.xml	(revision 734725f0160f358f7e1f097689ee957bbcdfd979)
+++ b/.idea/material_theme_project_new.xml	(date 1742287617298)
@@ -3,7 +3,10 @@
   <component name="MaterialThemeProjectNewConfig">
     <option name="metadata">
       <MTProjectMetadataState>
-        <option name="userId" value="38e0ec12:195a3510ae8:-7ff1" />
+        <option name="migrated" value="true" />
+        <option name="pristineConfig" value="false" />
+        <option name="userId" value="-77de9db7:18fc5c2254f:-8000" />
+        <option name="version" value="8.13.2" />
       </MTProjectMetadataState>
     </option>
   </component>
